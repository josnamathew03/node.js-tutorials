1]Node.js is an open source cross platform js runtime environment

Js Engine
Javascript code we write cannot be understood by the computer
JS engine is a program that converts js code that developers write into machine code that alloows computer to perfoe=rm a specific task
Js engines are developed by web browser vwndors
v8- google chrome

v8 JS engine :
v8 googles open source js engine  
v8 implements ECMAscript  as specified in ecma-262
v8 is written in c++ and is used in google chrome the opwn source brower from googlev8 can run standalone or cafn be embeded intoo any c++ applcations
by embeding v8 innto your own c++ application you can write c__ code that gets eecuted when a user writes js code 
you can add new feature to js iyself
since c++ is great for low level operations by embeding v8 into your own c++ program you have the power to add all of thatfunctionality in js
c++ proram we are talking is node js            

Javascriot runtime envirinment which provivery des all necesary components in order to use and run a js programe
every browser has a js engine 
a js engine is on ecomponent inhe js runtime


5] nodejs
what can you build with nodejs
- traditional websites 
-backend services like applcations
- real time applicaitons
- streaming services
-cli tools 
-mulktiplayer games
not a language not a framework

6] Executing js with node
1.Node REPL
read 
evaluate 
print
loop
in terminal node

7] browser vs nodejs


8]Modules
it is an encapsulated and reusable chunk of code that has its own context
in nide each file is treated as a seperate module
- local modules: modules that we create in our application
- build in modules- modules that node ships with out of the box
- third party modules - modules written by othetr developers that we can use in our application

9]locacl modules 
it is better to split our code use it whenever we wanted by exporting it
commonjs is a sandard that states how a modules should be structured and shared
in js each file is a module and is isolated by default
we can use require and pass in module as a string in brackts

10] module exports
using mdule we are asking to execute that module
rihgt way to do this is to expose some functionalities to external files

11] module scopes
each module in node hAS its own scope
IIFE( immedietly invoked function expression in node)
before a modules code is executed node will wrap it witha function erapper that provides module scope
this ves us from having to worry about conflicting cariables
there is proper encapsulation and reusabilty is unaffected

12] Module wrapper
IIFE contain 5 parametrers whichare important for functioning of a module
(function(exports, require, module, __filename, __dirname){
    const superHero = "Batman"
    console.log(siperHero)
})
__dirname: folder or directory name of curretn module
__filename: filename "
require function: used to import a module by path
